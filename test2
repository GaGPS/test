-- Mutation list (no emoji)
local Mutations = {
    "Tranquil", "Ascended", "Radiant", "Rainbow", "Shocked",
    "IronSkin", "Tiny", "Mega", "Golden", "Frozen",
    "Windy", "Inverted", "Shiny"
}

-- Get a random one
local function getRandomMutation()
    return Mutations[math.random(1, #Mutations)]
end

-- Detect held pet (in character as a model)
local function getHeldPet()
    local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()

    for _, obj in pairs(char:GetChildren()) do
        if obj:IsA("Model") and obj:FindFirstChild("HumanoidRootPart") == nil then
            if obj:FindFirstChild("Head") or obj:FindFirstChildWhichIsA("BasePart") then
                return obj
            end
        end
    end

    return nil
end

-- Apply or update mutation label
local function applyMutationToHeldPet()
    local pet = getHeldPet()

    if not pet then
        warn("No held pet detected.")
        return
    end

    local existing = pet:FindFirstChild("MutationTag")
    if existing then
        existing:Destroy()
    end

    local chosen = getRandomMutation()

    local part = pet:FindFirstChild("Head") or pet:FindFirstChildWhichIsA("BasePart")
    if not part then
        warn("No base part found on pet.")
        return
    end

    local tag = Instance.new("BillboardGui")
    tag.Name = "MutationTag"
    tag.Size = UDim2.new(0, 100, 0, 40)
    tag.Adornee = part
    tag.AlwaysOnTop = true
    tag.StudsOffset = Vector3.new(0, 2.5, 0)
    tag.Parent = pet

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.fromRGB(255, 255, 0)
    label.Font = Enum.Font.GothamBold
    label.Text = chosen
    label.TextScaled = true
    label.TextStrokeTransparency = 0.5
    label.Parent = tag

    print("Mutation set to:", chosen)
end

-- ðŸ‘‡ Attach this to your existing button (example: MutationButton)
MutationButton.MouseButton1Click:Connect(function()
    applyMutationToHeldPet()
end)
